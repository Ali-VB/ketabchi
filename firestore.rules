rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Publicly readable for homepage, but only owner can write.
    match /requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    match /trips/{tripId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // User profiles are public readable, but only owner can write.
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Users can interact with conversations they are part of.
    match /conversations/{conversationId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.users;

      // Corrected create rule for conversations
      allow create: if request.auth != null &&
                       request.auth.uid in request.resource.data.users &&
                       request.resource.data.users.size() == 2 &&
                       // Verify the conversationId matches the participants in the request data
                       conversationId == [request.resource.data.users[0], request.resource.data.users[1]].sort().join('_');

      match /messages/{messageId} {
        allow read: if request.auth != null &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.users;

        // Enhanced create rule for messages
        allow create: if request.auth != null &&
                         // User must be a participant of the conversation
                         request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.users &&
                         // SenderId in the message data must be the authenticated user
                         request.resource.data.senderId == request.auth.uid &&
                         // Enforce specific fields and their count for a new message
                         request.resource.data.keys().hasAll(['text', 'senderId', 'timestamp']) &&
                         request.resource.data.size() == 3 &&
                         // Validate text field type
                         request.resource.data.text is string &&
                         // Ensure server timestamp is used for the timestamp field
                         request.resource.data.timestamp == request.time;
      }
    }
    
    // Escrow/match documents can only be accessed by participants.
    match /matches/{matchId} {
        // Assume match is created by a trusted server process or the requester
        allow create: if request.auth != null && request.resource.data.requesterId == request.auth.uid;
        
        // Allow read if user is either the requester or the traveler
        allow read: if request.auth != null && (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.travelerId);

        // Allow update (confirm, dispute) if user is requester or traveler
        allow update: if request.auth != null && (request.auth.uid == resource.data.requesterId || request.auth.uid == resource.data.travelerId);
    }
  }
}
